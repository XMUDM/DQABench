from __future__ import annotations

## When running alone, you need to add
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

import re
import warnings
from typing import Dict

from langchain.prompts import PromptTemplate
from server.agent import model_container
import json
from server.agent.tools.database.Postgre import PG
# from server.agent.tools.get_database_info import LLMDBinfoChain
from pydantic import BaseModel, Field

_PROMPT_TEMPLATE = """
To assess this question, you need to generate a corresponding SQL statement. Then, execute the SQL statement and return the corresponding result in the database.

Note that you must ensure that the generated SQL statements comply with the syntax and database structure. If you are not clear about the database structure, please call 'database_structure_info_tool' first.

Your response should follow the format below. Please note that all marks like ```text must be included, as they are used to extract the answers.

```text
${{SQL you generated to execute}}


```output (not generated by you)
${{Specific information returned by the tool}}


```answer
${{Your answer}}


Now, My question is:
question: {question}
"""

PROMPT = PromptTemplate(
    input_variables=["question"],
    template=_PROMPT_TEMPLATE,
)

def execute_sql_method(query):
    try:
        table_info = ""
        column_info = "" 
        cardinity_info = ""
        try:
            database = PG()
        except Exception as e:
            return "Database connection failed, please check if there is any connection problem"
        result = database.execute_sql(query)
        database.close()
        return str(result)
    except Exception as e:
        return "SQL execution failed."

def database_execute_sql(query: str):
    print("printA" + query)
    # model = model_container.MODEL
    # llm_weather = LLMDBinfoChain.from_llm(model, verbose=True, prompt=PROMPT)
    res = execute_sql_method(query)
    ans = {"text": res}
    return ans

class ExecuteSQLInput(BaseModel):
    query: str = Field(description="SQL to be executed")