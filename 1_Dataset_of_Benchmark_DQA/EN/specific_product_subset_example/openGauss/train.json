[
    {
        "question": "What are the four main indicators included in the Memory Statistics report?",
        "answer": "The Memory Statistics report mainly includes the following four indicators:\n\n1. shared_used_memory: Already used shared memory size (MB).\n2. max_shared_memory: Maximum shared memory (MB).\n3. process_used_memory: Process already used memory (MB).\n4. max_process_memory: Maximum process memory (MB).\n",
        "doc": "Memory-Statistics_1.json",
        "retrieval": "Memory Statistics\nMemory Statistics指标名称及描述如下表所示。\n表 1  Memory Statistics报表主要内容\n指标名称 \n \n 描述 \n \n shared_used_memory \n \n 已经使用共享内存大小（MB）。 \n \n max_shared_memory \n \n 最大共享内存（MB）。 \n \n process_used_memory \n \n 进程已经使用内存（MB）。 \n \n max_process_memory \n \n 最大进程内存（MB）。\n列存表适合数据批量插入、更新较少和以查询为主统计分析类的场景。\", \"根据文档内容，选择行存表和列存表的具体情况如下：\\n\\n1. 行存表（Row Store Table）：\\n   - 数据按行存储到硬盘分区上，即一行数据是连续存储。\\n   - 适用于对数据需要经常更新的场景，如有频繁的INSERT、UPDATE操作。\\n   - 默认情况下，创建的表为行存储。\\n\\n2. 列存表（Column Store Table）：\\n   - 数据按列存储到硬盘分区上，即一列所有数据是连续存储的。\\n   - 适用于数据批量插入、更新较少和以查询为主统计分析类的场景。\\n   - 不适合点查询，但适合统计分析类查询和即席查询。\\n\\n选择行存表还是列存表的考虑因素包括：\\n- 更新频繁程度：频繁更新选择行存表。\\n- 插入频繁程度：少量频繁插入选择行存表，大批量插入选择列存表。\n{\"point\": [\"创建数据库用户包括创建用户和设置用户权限\", \"创建和管理数据库需要具备相应权限，可以通过拷贝模板数据库来创建新数据库\", \"规划存储模型包括行列混合存储的优缺点以及适用场景\", \"创建和管理表空间可以控制数据库安装的磁盘布局，包括创建、查询、修改和删除表空间\", \"创建和管理表包括创建表和向表中插入数据的操作\"], \"question\": [\"如何创建一个新的数据库用户？\", \"如何设置一个用户为系统管理员？\", \"如何通过拷贝模板数据库来创建新数据库？\", \"如何查看数据库系统的数据库列表？\", \"如何修改数据库的默认模式搜索路径？\", \"如何删除一个数据库？\", \"行存储和列存储各有什么优缺点？\", \"如何创建一个行存表？\", \"如何创建一个列存表？\", \"如何选择行存表和列存表？\", \"如何创建一个新的表空间？\", \"如何查询表空间的当前使用情况？\", \"如何修改一个表空间的名称？\", \"如何删除一个表空间？\", \"如何创建一个新的表？\", \"如何向表中插入数据？\n"
    },
    {
        "question": "How to insert data and perform rollback operations in a stored procedure?",
        "answer": "According to the documentation, the methods for inserting data and performing rollback operations in a stored procedure are as follows:\n\nUsing savepoints to rollback transaction modifications within the stored procedure, the example code is as follows:\n\n```sql\nCREATE OR REPLACE PROCEDURE STP_SAVEPOINT_EXAMPLE1()\nAS\nBEGIN\n    INSERT INTO EXAMPLE1 VALUES(1);\n    SAVEPOINT s1;\n    INSERT INTO EXAMPLE1 VALUES(2);\n    ROLLBACK TO s1;  -- Roll back the insertion of record 2\n    INSERT INTO EXAMPLE1 VALUES(3);\nEND;\n/\n```\n\nUsing savepoints to rollback to savepoints defined outside the stored procedure, the example code is as follows:\n\n```sql\nCREATE OR REPLACE PROCEDURE STP_SAVEPOINT_EXAMPLE2()\nAS\nBEGIN\n    INSERT INTO EXAMPLE1 VALUES(2);\n    ROLLBACK TO s1;  -- Roll back the insertion of record 2\n    INSERT INTO EXAMPLE1 VALUES(3);\nEND;\n/\n\nBEGIN;\nINSERT INTO EXAMPLE1 VALUES(1);\nSAVEPOINT s1;\nCALL STP_SAVEPOINT_EXAMPLE2();\nSELECT * FROM EXAMPLE1;\nCOMMIT;\n```\n\nRolling back to savepoints defined within the stored procedure from outside the stored procedure, the example code is as follows:\n\n```sql\nCREATE OR REPLACE PROCEDURE STP_SAVEPOINT_EXAMPLE3()\nAS\nBEGIN\n    INSERT INTO EXAMPLE1 VALUES(1);\n    SAVEPOINT s1;\n    INSERT INTO EXAMPLE1 VALUES(2);\nEND;\n/\n\nBEGIN;\nINSERT INTO EXAMPLE1 VALUES(3);\nCALL STP_SAVEPOINT_EXAMPLE3();\nROLLBACK TO SAVEPOINT s1; -- Roll back the insertion of record 2 within the stored procedure\nSELECT * FROM EXAMPLE1;\nCOMMIT;\n```\n\nThrough the above example code, you can insert data and perform rollback operations in a stored procedure. Choose the appropriate method based on your needs to achieve data insertion and rollback operations.\n",
        "doc": "事务管理_2.json",
        "retrieval": "示例16：存储过程中使用保存点回退到存储过程外部定义的保存点。\n```\nCREATE OR REPLACE PROCEDURE STP_SAVEPOINT_EXAMPLE2()\nAS\nBEGIN\n    INSERT INTO EXAMPLE1 VALUES(2);\n    ROLLBACK TO s1;  -- 回退插入记录2\n    INSERT INTO EXAMPLE1 VALUES(3);\nEND;\n/\nBEGIN;\nINSERT INTO EXAMPLE1 VALUES(1);\nSAVEPOINT s1;\nCALL STP_SAVEPOINT_EXAMPLE2();\nSELECT * FROM EXAMPLE1;\nCOMMIT;\n```\n示例17：存储过程外部回退到存储过程中定义的保存点。\n```\nCREATE OR REPLACE PROCEDURE STP_SAVEPOINT_EXAMPLE3()\nAS\nBEGIN\n    INSERT INTO EXAMPLE1 VALUES(1);\n    SAVEPOINT s1;\n    INSERT INTO EXAMPLE1 VALUES(2);\nEND;\n/\nBEGIN;\nINSERT INTO EXAMPLE1 VALUES(3);\nCALL STP_SAVEPOINT_EXAMPLE3();\nROLLBACK TO SAVEPOINT s1; --回退存储过程中插入记录2\nSELECT * FROM EXAMPLE1;\nCOMMIT;\n```\n示例15：存储过程使用保存点回退事务部分修改。\nCREATE OR REPLACE PROCEDURE STP_SAVEPOINT_EXAMPLE1()\nAS\nBEGIN\n    INSERT INTO EXAMPLE1 VALUES(1);\n    SAVEPOINT s1;\n    INSERT INTO EXAMPLE1 VALUES(2);\n    ROLLBACK TO s1;  -- 回退插入记录2\n    INSERT INTO EXAMPLE1 VALUES(3);\nEND;\n/\n"
    }
]