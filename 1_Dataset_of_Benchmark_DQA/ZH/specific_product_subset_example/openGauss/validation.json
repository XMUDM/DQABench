[
    {
        "question": "在编译openGauss之前需要安装什么库？",
        "answer": "在编译openGauss之前，需要安装libxml2-devel库。在文档中提到，执行yum install -y libxml2-devel命令可以安装该库。如果不安装该库，会导致在编译过程中出现“configure: error: library 'xml2' (version >= 2.6.23) is required for XML support”的报错。",
        "doc": "XML类型_1.json",
        "retrieval": "说明：\n该功能默认未开启，如需使用，需要重新使用build.sh脚本编译数据库，修改./configure配置参数，在其中加入--with-libxml参数。\n在执行编译之前，需要先执行yum install -y libxml2-devel，否则会有“configure: error: library 'xml2' (version >= 2.6.23) is required for XML support”的报错。\n在执行编译之前，需要三方库二进制文件中dependeny操作系统环境/libobs/comm/lib加入到系统环境变量LD_LIBRARY_PATH中，否则会报错“libiconv.so不存在”。\nXML类型\nopenGauss支持XML类型，使用示例如下。\nopenGauss= CREATE TABLE xmltest ( id int, data xml ); \nopenGauss= INSERT INTO xmltest VALUES (1, 'one');\nopenGauss= INSERT INTO xmltest VALUES (2, 'two'); \nopenGauss= SELECT * FROM xmltest ORDER BY 1;\n id | data \n----+--------------------\n1 | one \n2 | two \n(2 rows)\nopenGauss= SELECT xmlconcat('', NULL, ''); \nxmlconcat\n(1 row)\nopenGauss= SELECT xmlconcat('', NULL, ''); \nxmlconcat\n(1 row)\n说明：\n该功能默认未开启，如需使用，需要重新使用build.sh脚本编译数据库，修改./configure配置参数，在其中加入--with-libxml参数。\n{\"point\": [\"创建数据库用户包括创建用户和设置用户权限\", \"创建和管理数据库需要具备相应权限，可以通过拷贝模板数据库来创建新数据库\", \"规划存储模型包括行列混合存储的优缺点以及适用场景\", \"创建和管理表空间可以控制数据库安装的磁盘布局，包括创建、查询、修改和删除表空间\", \"创建和管理表包括创建表和向表中插入数据的操作\"], \"question\": [\"如何创建一个新的数据库用户？\", \"如何设置一个用户为系统管理员？\", \"如何通过拷贝模板数据库来创建新数据库？\", \"如何查看数据库系统的数据库列表？\", \"如何修改数据库的默认模式搜索路径？\", \"如何删除一个数据库？\", \"行存储和列存储各有什么优缺点？\", \"如何创建一个行存表？\", \"如何创建一个列存表？\", \"如何选择行存表和列存表？\", \"如何创建一个新的表空间？\", \"如何查询表空间的当前使用情况？\", \"如何修改一个表空间的名称？\", \"如何删除一个表空间？\", \"如何创建一个新的表？\", \"如何向表中插入数据？\n"
    },
    {
        "question": "如何使用GROUP BY子句统计记录数?",
        "answer": "要使用GROUP BY子句统计记录数，可以按照以下步骤进行操作：\n\n1. 连接到数据库并选择要查询的数据库。\n\n2. 使用以下SQL查询语句，按照指定的列进行分组，并使用COUNT(*)函数统计每个分组的记录数：\n\n```sql\nSELECT COUNT(*), r_reason_id \nFROM tpcds.reason_p \nGROUP BY r_reason_id;\n```\n\n在上述文档中的示例中，这个查询语句将会按照`r_reason_id`列进行分组，并统计每个不同的`r_reason_id`值对应的记录数。执行该查询后，将会返回类似以下结果：\n\n```\n count |   r_reason_id    \n-------+------------------\n     2 | AAAAAAAACAAAAAAA\n     5 | AAAAAAAABAAAAAAA\n```\n\n这表示在`tpcds.reason_p`表中，`r_reason_id`为`AAAAAAAACAAAAAAA`的记录有2条，`r_reason_id`为`AAAAAAAABAAAAAAA`的记录有5条。",
        "doc": "SELECT_3.json",
        "retrieval": "-------------+------------------+------------------------------------\n           4 | AAAAAAAABAAAAAAA | reason 3\n3 | AAAAAAAABAAAAAAA | reason 1\n(2 rows)\n--GROUP BY子句示例：按r_reason_id分组统计tpcds.reason_p表中的记录数。\nopenGauss=# SELECT COUNT(*),r_reason_id FROM tpcds.reason_p GROUP BY r_reason_id;\n count |   r_reason_id\n-------+------------------\n     2 | AAAAAAAACAAAAAAA\n     5 | AAAAAAAABAAAAAAA\n(2 rows)\n--GROUP BY CUBE子句示例：根据查询条件过滤，并对查询结果分组汇总。\nopenGauss=# SELECT * FROM tpcds.reason GROUP BY  CUBE (r_reason_id,r_reason_sk,r_reason_desc);\n--GROUP BY GROUPING SETS子句示例：根据查询条件过滤，并对查询结果分组汇总。\nopenGauss=# SELECT * FROM tpcds.reason GROUP BY  GROUPING SETS ((r_reason_id,r_reason_sk),r_reason_desc);\n--HAVING子句示例：按r_reason_id分组统计tpcds.reason_p表中的记录，并只显示r_reason_id个数大于2的信息。\nopenGauss=# SELECT COUNT(*) c,r_reason_id FROM tpcds.reason_p GROUP BY r_reason_id HAVING c>2;\n c |   r_reason_id\n---+------------------\n 5 | AAAAAAAABAAAAAAA\n(1 row)\n---+------------------\n 5 | AAAAAAAABAAAAAAA\n(1 row)\n--IN子句示例：按r_reason_id分组统计tpcds.reason_p表中的r_reason_id个数，并只显示r_reason_id值为 AAAAAAAABAAAAAAA或AAAAAAAADAAAAAAA的个数。\nopenGauss=# SELECT COUNT(*),r_reason_id FROM tpcds.reason_p GROUP BY r_reason_id HAVING r_reason_id IN('AAAAAAAABAAAAAAA','AAAAAAAADAAAAAAA'); \ncount |   r_reason_id\n-------+------------------\n     5 | AAAAAAAABAAAAAAA\n(1 row)\n"
    }
]